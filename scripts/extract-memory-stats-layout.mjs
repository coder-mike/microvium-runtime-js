import fs from 'fs';

const microviumH = fs.readFileSync('src/microvium/microvium.h', 'utf8');

const structPattern = /typedef struct mvm_TsMemoryStats {.*} mvm_TsMemoryStats/s;

let m = microviumH.match(structPattern);
if (!m) throw new Error('Could not find mvm_TsMemoryStats');

let lines = m[0].split(/\r?\n/g);
lines = lines.slice(1, lines.length - 2); // Remote header and footer
const fields = [];

for (const line of lines) {
  // Empty line
  if (line.trim() === '') continue;

  // Comment line
  if (line.trim().startsWith('//')) continue;

  // All fields are size_t
  if (line.trim().startsWith('size_t')) {
    fields.push(line.trim().split(/[ ;]+/g)[1]);
    continue;
  }

  throw new Error(`Unrecognized line: ${line}`)
}

const outContent = `
// THIS FILE IS AUTO-GENERATED BY scripts/extract-memory-stats-layout.mjs

export const memoryStatsFields = [${fields.map(f => JSON.stringify(f)).join(', ')}];

export interface MemoryStats {
  ${fields.map(f => `${f}: number;`).join('\n  ')}
}
`

fs.writeFileSync('src/memory-stats-fields.ts', outContent);